{"remainingRequest":"D:\\GH\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GH\\LWP\\light-weightplayer\\src\\views\\singerDetail\\SingerDetail.vue?vue&type=style&index=0&id=daa28a76&scoped=true&lang=css&","dependencies":[{"path":"D:\\GH\\LWP\\light-weightplayer\\src\\views\\singerDetail\\SingerDetail.vue","mtime":1632135031000},{"path":"D:\\GH\\node_modules\\css-loader\\dist\\cjs.js","mtime":1636408356404},{"path":"D:\\GH\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1636408358142},{"path":"D:\\GH\\node_modules\\postcss-loader\\src\\index.js","mtime":1636408357193},{"path":"D:\\GH\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636408355875},{"path":"D:\\GH\\node_modules\\vue-loader\\lib\\index.js","mtime":1636408357599}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc2luZ2VyRGV0YWlsIHsKICBvdmVyZmxvdy15OiBzY3JvbGw7Cn0KCi5saXN0SW5mbyB7CiAgZGlzcGxheTogZmxleDsKICBwYWRkaW5nOiAyNXB4IDEwcHg7Cn0KCi5saXN0QXZhdGFyIHsKICB3aWR0aDogMTUwcHg7CiAgaGVpZ2h0OiAxNTBweDsKICBvdmVyZmxvdzogaGlkZGVuOwogIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgbWFyZ2luLXJpZ2h0OiAxNXB4Owp9CgoubGlzdEF2YXRhciBpbWcgewogIHdpZHRoOiAxMDAlOwp9CgoucmlnaHQgewogIG1hcmdpbi10b3A6IDEwcHg7CiAgd2lkdGg6IGNhbGMoMTAwJSAtIDIwMHB4KTsKfQoKLnRpdGxlIHsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KCi50aXRsZVRhZyB7CiAgZm9udC1zaXplOiAxMnB4OwogIGNvbG9yOiAjZWM0MTQxOwogIGJvcmRlcjogMXB4IHNvbGlkICNlYzQxNDE7CiAgcGFkZGluZzogMXB4IDJweDsKICBib3JkZXItcmFkaXVzOiAycHg7CiAgbWFyZ2luLXJpZ2h0OiA1cHg7CiAgdHJhbnNmb3JtOiBzY2FsZSgwLjgpOwp9CgoudGl0bGVDb250ZW50IHsKICBmb250LXNpemU6IDIwcHg7CiAgZm9udC13ZWlnaHQ6IDYwMDsKICBjb2xvcjogIzM3MzczNzsKICBvdmVyZmxvdzogaGlkZGVuOwogIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOwogIHdoaXRlLXNwYWNlOiBub3dyYXA7CiAgd2lkdGg6IDkwJTsKfQoKLmJ1dHRvbnMgewogIG1hcmdpbjogMTVweCAwIDAgLTVweDsKICBkaXNwbGF5OiBmbGV4Owp9CgouYnV0dG9uSXRlbSB7CiAgZm9udC1zaXplOiAxMnB4OwogIHBhZGRpbmc6IDhweCAxNXB4OwogIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7CiAgYm9yZGVyLXJhZGl1czogMjBweDsKICB0cmFuc2Zvcm06IHNjYWxlKDAuOSk7Cn0KCi5idXR0b25JdGVtIGkgewogIGZvbnQtc2l6ZTogMTJweDsKICBtYXJnaW4tcmlnaHQ6IDNweDsKICB0cmFuc2Zvcm06IHNjYWxlKDAuOSk7Cn0KCi5wbGF5QWxsIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWM0MTQxOwogIGNvbG9yOiB3aGl0ZTsKfQoKLm90aGVySW5mbyB7CiAgbWFyZ2luOiAxNXB4IDAgMCAtMzBweDsKICBkaXNwbGF5OiBmbGV4OwogIGZvbnQtc2l6ZTogMTJweDsKICB0cmFuc2Zvcm06IHNjYWxlKDAuOSk7Cn0KCi5tdXNpY051bSB7CiAgbWFyZ2luLXJpZ2h0OiAxM3B4Owp9CgoubXVzaWNMaXN0IHsKICBtYXJnaW46IDAgMTBweDsKfQoKLnRpdGxlIHsKICBmb250LXNpemU6IDE2cHg7CiAgZm9udC13ZWlnaHQ6IDYwMDsKICBjb2xvcjogYmxhY2s7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKfQoKLnNpbmdlckRlc2MgewogIGZvbnQtc2l6ZTogMTJweDsKICBjb2xvcjogIzM3MzczNzsKICBsaW5lLWhlaWdodDogMjVweDsKICBsZXR0ZXItc3BhY2luZzogMC41cHg7CiAgdGV4dC1pbmRlbnQ6IDJlbTsKfQoKLnJlZCB7CiAgY29sb3I6ICNlYzQxNDE7Cn0K"},{"version":3,"sources":["SingerDetail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAweA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"SingerDetail.vue","sourceRoot":"src/views/singerDetail","sourcesContent":["<template>\n  <div v-if=\"singerInfo.cover\" class=\"singerDetail\">\n    <!-- 类名可能不太对应文件，因为html和样式都是直接搬MusicListDetail里面的 -->\n    <!-- 歌单信息 -->\n    <div class=\"listInfo\">\n      <!-- 歌单封面 -->\n      <div class=\"listAvatar\">\n        <img :src=\"singerInfo.cover + '?param=300y300'\" alt=\"\" />\n      </div>\n      <div class=\"right\">\n        <!-- 标题 -->\n        <div class=\"title\">\n          <div class=\"titleContent\">{{ singerInfo.name }}</div>\n        </div>\n        <!-- 操作按钮 -->\n        <div class=\"buttons\">\n          <div class=\"buttonItem\" @click=\"subSinger\">\n            <i class=\"iconfont icon-xihuan\" :class=\"isSub ? 'red' : ''\"></i>\n            <span>{{ isSub ? \"已收藏\" : \"收藏\" }}</span>\n          </div>\n          <div class=\"buttonItem\">\n            <i class=\"iconfont icon-link\"></i>\n            <span>个人主页</span>\n          </div>\n        </div>\n        <!-- 歌曲列表的歌曲数量和播放量 -->\n        <div class=\"otherInfo\">\n          <div class=\"musicNum\">单曲数 : {{ singerInfo.musicSize }}</div>\n          <div class=\"musicNum\">专辑数 : {{ singerInfo.albumSize }}</div>\n          <div class=\"musicNum\">MV数 : {{ singerInfo.mvSize }}</div>\n        </div>\n      </div>\n    </div>\n    <!-- 歌曲列表 -->\n    <div class=\"musicList\">\n      <el-tabs value=\"first\" @tab-click=\"clickTab\">\n        <el-tab-pane label=\"专辑\" name=\"first\">\n          <div class=\"topSongs\" v-if=\"topSongs.topSongs\">\n            <!-- 热门50首没有id，将歌手id作为listid -->\n            <list-table\n              :officialListDetailItem=\"topSongs\"\n              @handleRowClick=\"handleRowClick\"\n              @handleRowDbClick=\"handleRowDbClick\"\n              @clickCheckAll=\"allTopSongs\"\n              :isCheckAllShow=\"isCheckAllShow\"\n              :cover=\"require('/src/assets/img/topSongsLogo.png')\"\n              :listId=\"this.$route.params.id.toString()\"\n            >\n              <div slot=\"header\" class=\"header\">\n                <div class=\"title\">热门50首</div>\n              </div>\n            </list-table>\n          </div>\n          <div\n            class=\"albumItemContainer\"\n            v-if=\"singerAlbum.length != 0\"\n            v-infinite-scroll=\"load\"\n            :infinite-scroll-disabled=\"disabled\"\n            :infinite-scroll-distance=\"300\"\n            :infinite-scroll-immediate=\"false\"\n          >\n            <div\n              class=\"albumItem\"\n              v-for=\"(item, index) in singerAlbum\"\n              :key=\"index\"\n            >\n              <list-table\n                :officialListDetailItem=\"item.songsObj\"\n                @handleRowClick=\"handleRowClick\"\n                @handleRowDbClick=\"handleRowDbClick\"\n                @clickCheckAll=\"clickListCardItem\"\n                :cover=\"item.album.blurPicUrl + '?param=300y300'\"\n                :listId=\"item.album.id.toString()\"\n              >\n                <div slot=\"header\" class=\"header\">\n                  <div class=\"title\">{{ item.album.name }}</div>\n                </div>\n              </list-table>\n            </div>\n          </div>\n        </el-tab-pane>\n        <el-tab-pane label=\"MV\" name=\"second\">\n          <video-list-card\n            :videoList=\"singerMvInfo.mvs\"\n            :isLoad=\"true\"\n            @clickListCardItem=\"goToVideoDetail\"\n            @bottomLoad=\"bottomLoad\"\n          ></video-list-card>\n        </el-tab-pane>\n        <el-tab-pane label=\"歌手详情\" name=\"third\">\n          <div class=\"singerDesc\">{{ singerInfo.briefDesc }}</div>\n        </el-tab-pane>\n      </el-tabs>\n    </div>\n    <go-top scrollObj=\".singerDetail\"></go-top>\n  </div>\n</template>\n\n<script>\nimport { handleMusicTime } from \"plugins/utils\";\nimport ListTable from \"components/listTable/ListTable.vue\";\nimport VideoListCard from \"components/videoListCard/VideoListCard.vue\";\nimport GoTop from \"components/goTop/GoTop.vue\";\n\n// 记录上一首播放的音乐信息  用于清空小喇叭和红字样式\nlet currentRowInfo = {};\n// 定时器名称\nlet timer;\n\nexport default {\n  components: { ListTable, VideoListCard, GoTop },\n  name: \"SingerDetail\",\n  data() {\n    return {\n      singerInfo: {},\n      // 热门50首\n      topSongs: {},\n      // 歌手专辑\n      singerAlbum: [],\n      // 专辑页数\n      albumPage: 1,\n      disabled: true,\n      isAlbumMore: false,\n      // 是否显示topSong的查看全部按钮\n      isCheckAllShow: true,\n      // 歌手mv数据\n      singerMvInfo: { mvs: [], hasMore: false },\n      // mv页数\n      videoPage: 1,\n      // 是否是双击操作\n      isDbc: false,\n      // 是否收藏了当前歌手\n      isSub: false,\n    };\n  },\n  methods: {\n    // 请求\n    // 请求歌手详情\n    async getSingerInfo() {\n      let res = await this.$request(\"/artist/detail\", {\n        id: this.$route.params.id,\n      });\n      // console.log(res);\n      this.singerInfo = res.data.data.artist;\n    },\n    // 请求歌手热门50首歌曲\n    async getSingerTopSongs() {\n      let res = await this.$request(\"/artist/top/song\", {\n        id: this.$route.params.id,\n      });\n      // console.log(res);\n      let topSongs = res.data.songs;\n      // 处理歌单中歌曲的时间\n      topSongs.forEach((item, index) => {\n        topSongs[index].dt = handleMusicTime(item.dt);\n      });\n      // topSongs改成对象，并向里面添加isOpen属性，用于点击查看列表所有歌曲\n      this.topSongs = { topSongs, isOpen: false };\n    },\n    // 请求专辑列表 再用专辑id查询专辑信息\n    async getAlbumInfo() {\n      let res = await this.$request(\"/artist/album\", {\n        id: this.$route.params.id,\n        limit: 20,\n        offset: (this.albumPage - 1) * 20,\n      });\n      this.isAlbumMore = res.data.more;\n      res = res.data.hotAlbums;\n      await res.forEach((item) => {\n        this.getAlbumDetail(item.id);\n      });\n      // console.log(\"拿到了专辑数据并保存\", this.singerAlbum);\n    },\n    // 请求专辑详情信息\n    async getAlbumDetail(id) {\n      let res = await this.$request(\"/album\", { id });\n      // 将数组songs再保存一个对象格式，方便组件使用\n      res = res.data;\n      let songs = res.songs;\n      // 处理歌单中歌曲的时间\n      songs.forEach((item, index) => {\n        songs[index].dt = handleMusicTime(item.dt);\n      });\n      res.songsObj = { songs };\n      this.singerAlbum.push(res);\n    },\n    // 请求歌手 mv 数据\n    async getSingerMv() {\n      // 这个接口没有offset 参数\n      let res = await this.$request(\"/artist/mv\", {\n        id: this.$route.params.id,\n        limit: 20 * this.videoPage,\n      });\n      console.log(res);\n      this.singerMvInfo = res.data;\n    },\n    // 请求收藏的歌手列表\n    async getSubSingerList() {\n      let timestamp = Date.parse(new Date());\n      let res = await this.$request(\"/artist/sublist\", {\n        limit: 1000,\n        timestamp,\n      });\n      console.log(res.data.data);\n      this.$store.commit(\"updateSubSingerList\", res.data.data);\n    },\n\n    // 事件函数\n    // 行点击事件的回调\n    handleRowClick(event) {\n      // console.log(event);\n      if (document.querySelector(\".selectRow\")) {\n        document.querySelector(\".selectRow\").classList.remove(\"selectRow\");\n      }\n      event.classList.add(\"selectRow\");\n    },\n\n    // 行双击事件的回调\n    // 这里的 id是歌曲id   index 双击歌曲在歌单中的索引   listId是歌单id\n    handleRowDbClick({ id, index, listId }) {\n      // console.log(id);\n      // console.log(index);\n      // console.log(listId);\n      this.isDbc = true;\n\n      this.handleViewDOM(id, listId, index);\n\n      // 播放的逻辑操作\n      if (listId != this.$route.params.id) {\n        let musicListIndex = this.singerAlbum.findIndex(\n          (item) => item.album.id == listId\n        );\n        // console.log(musicListIndex);\n        this.$store.commit(\"updateMusicId\", id);\n        // 如果歌单发生变化,则提交歌单到vuex\n        if (listId != this.$store.state.musicListId) {\n          // 将歌单传到vuex\n          this.$store.commit(\"updateMusicList\", {\n            musicList: this.singerAlbum[musicListIndex].songs,\n            musicListId: listId,\n          });\n        }\n      } else {\n        this.$store.commit(\"updateMusicId\", id);\n        // 如果歌单发生变化,则提交歌单到vuex\n        // 如果是topsong 就拿歌手的id 当作listid 作为唯一辨识\n        if (this.$route.params.id != this.$store.state.musicListId) {\n          // 将歌单传到vuex\n          this.$store.commit(\"updateMusicList\", {\n            musicList: this.topSongs.topSongs,\n            musicListId: this.$route.params.id,\n          });\n        }\n      }\n      // console.log(123);\n    },\n\n    handleViewDOM(id, listId, index) {\n      // 先清空之前的样式\n      if (currentRowInfo.listId) {\n        this.cleanStyle(currentRowInfo.i, currentRowInfo.listId);\n      }\n      let tables = document.querySelectorAll(\"table\");\n      // 这里的 id是歌曲id   index 双击歌曲在歌单中的索引   listId是歌单id\n      let i = -1;\n      // 根据listId找歌单索引 listIndex\n      let listIndex = -1;\n      // top50的情况\n      if (listId == this.$route.params.id) {\n        listIndex = 0;\n      } // 专辑的情况\n      else {\n        listIndex = this.singerAlbum.findIndex(\n          (item) => item.album.id == listId\n        );\n        console.log(listIndex, \"listIndex\");\n        // 如果没有，说明目前还没有渲染或者还没有请求\n        if (listIndex == -1) {\n          console.log(\"can not find listIndex\");\n          return;\n        }\n        listIndex += 1;\n      }\n\n      // 找歌曲在歌单中的索引 i\n      if (index == undefined) {\n        // 分top50和专辑两种情况\n        if (listIndex == 0) {\n          i = this.topSongs.topSongs.findIndex((item) => item.id == id);\n        } else {\n          i = this.singerAlbum[listIndex - 1].songs.findIndex(\n            (item) => item.id == id\n          );\n        }\n      } else {\n        i = index;\n      }\n\n      console.log(i, \"i\");\n      console.log(index, \"index\");\n      // 渲染\n      if (tables[listIndex] && tables[listIndex].children[i]) {\n        let currentRow = tables[listIndex].children[i];\n        // console.log(currentRow);\n        currentRow.querySelector(\".index\").innerHTML =\n          \"<i class='iconfont icon-yinliang' style='color:#ff4e4e'></i>\";\n        currentRow.querySelector(\".musicName\").style.color = \"#ff4e4e\";\n\n        // 保存当前数据 供下次清空样式使用\n        currentRowInfo.i = i;\n        // 因为歌单的顺序可能会改变，所以不要直接保存索引\n        currentRowInfo.listId = listId;\n        currentRowInfo.singerId = this.$route.params.id;\n        // 将currentRowInfo上传至vuex 供下次重新进入页面使用\n        this.$store.commit(\"updateCurrentRowInfo\", currentRowInfo);\n      }\n    },\n\n    cleanStyle(i, listId) {\n      let tables = document.querySelectorAll(\"table\");\n      // 找到歌单的索引\n      let listIndex = -1;\n      if (listId == this.$route.params.id) {\n        listIndex = 0;\n      } // 专辑的情况\n      else {\n        listIndex = this.singerAlbum.findIndex(\n          (item) => item.album.id == listId\n        );\n        // 如果没有，说明目前还没有渲染或者还没有请求\n        if (listIndex == -1) {\n          console.log(\"can not find listIndex\");\n          return;\n        }\n        listIndex += 1;\n      }\n      // console.log(\"执行了清空\");\n      // console.log(\"listIndex:\", listIndex);\n      // console.log(\"i:\", i);\n      if (tables[listIndex] && tables[listIndex].children[i]) {\n        let lastRow = tables[listIndex].children[i];\n        lastRow.querySelector(\".index\").innerHTML = i + 1;\n        lastRow.querySelector(\".musicName\").style.color = \"#1f1f1f\";\n      }\n    },\n\n    // 点击榜单进入歌单详情界面\n    clickListCardItem({ listId }) {\n      console.log(listId);\n      this.$router.push({ name: \"album\", params: { id: listId } });\n      // this.$router.push({ name: \"musicListDetail\", params: { id } });\n      // console.log(123);\n    },\n    // 查看热门50首全部歌曲\n    allTopSongs() {\n      this.topSongs.isOpen = true;\n      this.isCheckAllShow = false;\n      // 查看全部后再次渲染样式\n      setTimeout(() => {\n        if (\n          this.$store.state.currentRowInfo.singerId == this.$route.params.id\n        ) {\n          this.handleViewDOM(\n            this.$store.state.musicId,\n            this.$store.state.musicListId\n          );\n        }\n      }, 500);\n    },\n    // 专辑上拉触底加载\n    load() {\n      // console.log(\"上拉触底\");\n      this.disabled = true;\n      this.albumPage += 1;\n      this.getAlbumInfo();\n    },\n\n    // mv上拉加载\n    bottomLoad() {\n      if (this.singerMvInfo.hasMore == true) {\n        this.videoPage += 1;\n        this.getSingerMv();\n      }\n    },\n    // 点击视频卡片进入视频详情\n    goToVideoDetail({ id }) {\n      if (!this.$store.state.isLogin) {\n        this.$message.error(\"登录后才能观看MV哦!\");\n        return;\n      }\n      // console.log(id);\n      this.$router.push({ name: \"videoDetail\", params: { id, type: \"mv\" } });\n    },\n    // 点击el-tab-pane的回调\n    clickTab(e) {\n      console.log(e.index);\n      if (e.index == 1 && this.singerMvInfo.mvs.length == 0) {\n        this.getSingerMv();\n      }\n    },\n    // 判断用户是否收藏了该歌手\n    getIsSub() {\n      this.isSub = this.$store.state.subSingerList.find(\n        (item) => item.id == this.$route.params.id\n      );\n    },\n    // 点击subSinger按钮的回调\n    async subSinger() {\n      if (!this.$store.state.isLogin) {\n        this.$message.error(\"请先登录!\");\n        return;\n      }\n      this.isSub = !this.isSub;\n      // 发送请求\n      await this.$request(\"/artist/sub\", {\n        id: this.$route.params.id,\n        t: this.isSub ? 1 : 0,\n      });\n      // 每次进行修改操作后，都需要更新vuex里面的收藏list\n      this.getSubSingerList();\n    },\n  },\n  created() {\n    this.getSingerInfo();\n  },\n  watch: {\n    singerAlbum() {\n      if (this.singerAlbum.length != 0 && this.isAlbumMore) {\n        this.disabled = false;\n      } else {\n        this.disabled = true;\n      }\n    },\n    // 音乐加载完成后重置isDbc\n    \"$store.state.isMusicLoad\"(isMusicLoad) {\n      if (!isMusicLoad) {\n        this.isDbc = false;\n      }\n    },\n\n    \"$store.state.musicId\"(current, last) {\n      // 判断是否是双击，如果是双击则不用调用handleView\n      if (!this.isDbc) {\n        // id,listId\n        this.handleViewDOM(\n          this.$store.state.musicId,\n          this.$store.state.musicListId\n        );\n      }\n    },\n\n    // 监听singerAlbum的变化\n    singerAlbum() {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        if (\n          this.$store.state.currentRowInfo.singerId == this.$route.params.id\n        ) {\n          this.handleViewDOM(\n            this.$store.state.musicId,\n            this.$store.state.musicListId\n          );\n        }\n      }, 500);\n    },\n  },\n  async mounted() {\n    await this.getSingerTopSongs();\n    await this.getAlbumInfo();\n    this.$nextTick(() => {\n      if (this.$store.state.currentRowInfo.singerId == this.$route.params.id) {\n        this.handleViewDOM(\n          this.$store.state.musicId,\n          this.$store.state.musicListId\n        );\n      }\n    });\n    if (this.$store.state.isLogin) {\n      if (this.$store.state.subSingerList == null) {\n        await this.getSubSingerList();\n      }\n      this.getIsSub();\n    }\n  },\n};\n</script>\n\n<style scoped>\n.singerDetail {\n  overflow-y: scroll;\n}\n\n.listInfo {\n  display: flex;\n  padding: 25px 10px;\n}\n\n.listAvatar {\n  width: 150px;\n  height: 150px;\n  overflow: hidden;\n  border-radius: 10px;\n  margin-right: 15px;\n}\n\n.listAvatar img {\n  width: 100%;\n}\n\n.right {\n  margin-top: 10px;\n  width: calc(100% - 200px);\n}\n\n.title {\n  display: flex;\n  align-items: center;\n}\n\n.titleTag {\n  font-size: 12px;\n  color: #ec4141;\n  border: 1px solid #ec4141;\n  padding: 1px 2px;\n  border-radius: 2px;\n  margin-right: 5px;\n  transform: scale(0.8);\n}\n\n.titleContent {\n  font-size: 20px;\n  font-weight: 600;\n  color: #373737;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 90%;\n}\n\n.buttons {\n  margin: 15px 0 0 -5px;\n  display: flex;\n}\n\n.buttonItem {\n  font-size: 12px;\n  padding: 8px 15px;\n  border: 1px solid #ddd;\n  border-radius: 20px;\n  transform: scale(0.9);\n}\n\n.buttonItem i {\n  font-size: 12px;\n  margin-right: 3px;\n  transform: scale(0.9);\n}\n\n.playAll {\n  background-color: #ec4141;\n  color: white;\n}\n\n.otherInfo {\n  margin: 15px 0 0 -30px;\n  display: flex;\n  font-size: 12px;\n  transform: scale(0.9);\n}\n\n.musicNum {\n  margin-right: 13px;\n}\n\n.musicList {\n  margin: 0 10px;\n}\n\n.title {\n  font-size: 16px;\n  font-weight: 600;\n  color: black;\n  margin-bottom: 10px;\n}\n\n.singerDesc {\n  font-size: 12px;\n  color: #373737;\n  line-height: 25px;\n  letter-spacing: 0.5px;\n  text-indent: 2em;\n}\n\n.red {\n  color: #ec4141;\n}\n</style>"]}]}