{"remainingRequest":"D:\\vue_cloud_music-master\\light-webplayer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue_cloud_music-master\\light-webplayer\\src\\views\\album\\Album.vue?vue&type=style&index=0&id=375b7305&scoped=true&lang=css&","dependencies":[{"path":"D:\\vue_cloud_music-master\\light-webplayer\\src\\views\\album\\Album.vue","mtime":1632135031000},{"path":"D:\\vue_cloud_music-master\\light-webplayer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1636408356404},{"path":"D:\\vue_cloud_music-master\\light-webplayer\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1636408358142},{"path":"D:\\vue_cloud_music-master\\light-webplayer\\node_modules\\postcss-loader\\src\\index.js","mtime":1636408357193},{"path":"D:\\vue_cloud_music-master\\light-webplayer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636408355875},{"path":"D:\\vue_cloud_music-master\\light-webplayer\\node_modules\\vue-loader\\lib\\index.js","mtime":1636408357599}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmFsYnVtIHsKICBoZWlnaHQ6IGNhbGMoODB2aCAtIDEwNXB4KTsKICBvdmVyZmxvdy15OiBzY3JvbGw7Cn0KCi5saXN0SW5mbyB7CiAgZGlzcGxheTogZmxleDsKICBwYWRkaW5nOiAyNXB4IDE1cHg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKfQoKLmxpc3RBdmF0YXIgewogIHdpZHRoOiAxNTBweDsKICBoZWlnaHQ6IDE1MHB4OwogIG92ZXJmbG93OiBoaWRkZW47CiAgYm9yZGVyLXJhZGl1czogMTBweDsKICBtYXJnaW4tcmlnaHQ6IDE1cHg7Cn0KCi5saXN0QXZhdGFyIGltZyB7CiAgd2lkdGg6IDEwMCU7Cn0KCi5yaWdodCB7CiAgd2lkdGg6IGNhbGMoMTAwJSAtIDIwMHB4KTsKfQoKLnRpdGxlIHsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KCi50aXRsZVRhZyB7CiAgZm9udC1zaXplOiAxMnB4OwogIGNvbG9yOiAjZWM0MTQxOwogIGJvcmRlcjogMXB4IHNvbGlkICNlYzQxNDE7CiAgcGFkZGluZzogMXB4IDJweDsKICBib3JkZXItcmFkaXVzOiAycHg7CiAgbWFyZ2luLXJpZ2h0OiA1cHg7CiAgdHJhbnNmb3JtOiBzY2FsZSgwLjgpOwp9CgoudGl0bGVDb250ZW50IHsKICBmb250LXNpemU6IDIwcHg7CiAgZm9udC13ZWlnaHQ6IDYwMDsKICBjb2xvcjogIzM3MzczNzsKICBvdmVyZmxvdzogaGlkZGVuOwogIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOwogIHdoaXRlLXNwYWNlOiBub3dyYXA7CiAgd2lkdGg6IDkwJTsKfQoKLmNyZWF0ZVRpbWUgewogIHRyYW5zZm9ybTogc2NhbGUoMC45KTsKfQoKLmJ1dHRvbnMgewogIG1hcmdpbjogOHB4IDAgMCAtNXB4OwogIGRpc3BsYXk6IGZsZXg7Cn0KCi5idXR0b25JdGVtIHsKICBmb250LXNpemU6IDEycHg7CiAgcGFkZGluZzogOHB4IDE1cHg7CiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDsKICBib3JkZXItcmFkaXVzOiAyMHB4OwogIHRyYW5zZm9ybTogc2NhbGUoMC45KTsKfQoKLmJ1dHRvbkl0ZW0gaSB7CiAgZm9udC1zaXplOiAxMnB4OwogIG1hcmdpbi1yaWdodDogM3B4OwogIHRyYW5zZm9ybTogc2NhbGUoMC45KTsKfQoKLnBsYXlBbGwgewogIGJhY2tncm91bmQtY29sb3I6ICNlYzQxNDE7CiAgY29sb3I6IHdoaXRlOwp9Cgoub3RoZXJJbmZvIHsKICBtYXJnaW46IDVweCAwIDAgLTMwcHg7CiAgZGlzcGxheTogZmxleDsKICBmb250LXNpemU6IDEycHg7CiAgdHJhbnNmb3JtOiBzY2FsZSgwLjkpOwp9CgoubXVzaWNOdW0gewogIG1hcmdpbi1yaWdodDogMTNweDsKfQoKLm11c2ljTGlzdCB7CiAgbWFyZ2luOiAtMTVweCAxNXB4IDA7Cn0KCi5wYWdlIHsKICB3aWR0aDogMTAwJTsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgcGFkZGluZy1ib3R0b206IDIwcHg7Cn0KCi5hbGJ1bURlc2MgewogIGZvbnQtc2l6ZTogMTJweDsKICBjb2xvcjogIzM3MzczNzsKICBsaW5lLWhlaWdodDogMjVweDsKICBsZXR0ZXItc3BhY2luZzogMC41cHg7CiAgdGV4dC1pbmRlbnQ6IDJlbTsKfQoKLnJlZCB7CiAgY29sb3I6ICNlYzQxNDE7Cn0KCi5hbGJ1bSAvZGVlcC8gLmVsLWxvYWRpbmctc3Bpbm5lciB7CiAgdG9wOiA0MHB4Owp9CgoucGxheUNvdW50IHNwYW4gewogIGN1cnNvcjogcG9pbnRlcjsKfQo="},{"version":3,"sources":["Album.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"Album.vue","sourceRoot":"src/views/album","sourcesContent":["<template>\n  <div class=\"album\" v-if=\"albumInfo.album\">\n    <!-- 类名可能不太对应文件，因为html和样式都是直接搬MusicListDetail里面的 -->\n    <!-- 专辑跳到歌手页面正在播放的样式不会渲染，这些操作DOM写的有些乱，懒得搞了-->\n    <!-- 歌单信息 -->\n    <div class=\"listInfo\">\n      <!-- 歌单封面 -->\n      <div class=\"listAvatar\">\n        <img :src=\"albumInfo.album.picUrl + '?param=300y300'\" alt=\"\" />\n      </div>\n      <div class=\"right\">\n        <!-- 标题 -->\n        <div class=\"title\">\n          <div class=\"titleTag\">专辑</div>\n          <div class=\"titleContent\">{{ albumInfo.album.name }}</div>\n        </div>\n        <!-- 操作按钮 -->\n        <div class=\"buttons\">\n          <div class=\"buttonItem playAll\" @click=\"playAll\">\n            <i class=\"iconfont icon-bofang playAll\"></i>\n            <span>播放全部</span>\n          </div>\n          <div class=\"buttonItem\" @click=\"subAlbum\">\n            <i class=\"iconfont icon-xihuan\" :class=\"isSub ? 'red' : ''\"></i>\n            <span>{{ isSub ? \"已收藏\" : \"收藏\" }}</span>\n          </div>\n          <div class=\"buttonItem\">\n            <i class=\"iconfont icon-zhuanfa\"></i>\n            <span>分享</span>\n          </div>\n        </div>\n        <div class=\"otherInfo\">\n          <div class=\"playCount\">\n            歌手 :\n            <span\n              @click=\"\n                $router.push({\n                  name: 'singerDetail',\n                  params: { id: albumInfo.album.artist.id },\n                })\n              \"\n              >{{ albumInfo.album.artist.name }}</span\n            >\n          </div>\n        </div>\n        <div class=\"otherInfo\">\n          <div class=\"playCount\">\n            时间 : {{ albumInfo.album.publishTime | showDate }}\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- 歌曲列表 -->\n    <div class=\"musicList\">\n      <el-tabs value=\"first\">\n        <el-tab-pane label=\"歌曲列表\" name=\"first\">\n          <!-- 表格 -->\n          <!-- 第三方组件的table在退出后不会销毁，而是继续保留，导致多个table同时存在 ref变得不唯一 \n              解决办法：避免使用refs..（拼接也不好使） -->\n          <el-table\n            :data=\"albumInfo.songs\"\n            size=\"mini\"\n            style=\"width: 100%\"\n            @row-dblclick=\"clickRow\"\n            @cell-click=\"clickCell\"\n            highlight-current-row\n            stripe\n          >\n            <el-table-column\n              label=\"\"\n              width=\"30\"\n              type=\"index\"\n              :index=\"handleIndex\"\n            >\n            </el-table-column>\n            <el-table-column label=\"\" width=\"23\">\n              <!-- 下载按钮 -->\n              <i class=\"iconfont icon-download\"></i>\n            </el-table-column>\n            <el-table-column prop=\"name\" label=\"音乐标题\" min-width=\"200\">\n            </el-table-column>\n            <el-table-column prop=\"ar[0].name\" label=\"歌手\" min-width=\"100\">\n            </el-table-column>\n            <el-table-column prop=\"al.name\" label=\"专辑\" min-width=\"140\">\n            </el-table-column>\n            <el-table-column prop=\"dt\" label=\"时长\" min-width=\"100\">\n            </el-table-column>\n          </el-table>\n        </el-tab-pane>\n        <el-tab-pane label=\"评论\" name=\"second\">\n          <div class=\"commentList\" v-loading=\"isCommentLoading\">\n            <!-- 精彩评论 -->\n            <comment\n              :comments=\"comments.hotComments\"\n              :commentType=\"'album'\"\n              :commentId=\"albumInfo.album.id + ''\"\n              @getComment=\"getAlbumComment\"\n              v-if=\"comments.hotComments\"\n              ><div slot=\"title\">精彩评论</div></comment\n            >\n            <!-- 最新评论 -->\n            <comment\n              :comments=\"comments.comments\"\n              :commentType=\"'album'\"\n              :commentId=\"albumInfo.album.id + ''\"\n              :isHotComment=\"comments.hotComments ? false : true\"\n              @getComment=\"getAlbumComment\"\n              ><div slot=\"title\">热门评论</div></comment\n            >\n          </div>\n          <!-- 分页 -->\n          <div class=\"page\" v-if=\"comments && comments.comments\">\n            <el-pagination\n              background\n              layout=\"prev, pager, next\"\n              :total=\"comments.total\"\n              small\n              :page-size=\"50\"\n              :current-page=\"currentCommentPage\"\n              @current-change=\"commentPageChange\"\n            >\n            </el-pagination>\n          </div>\n        </el-tab-pane>\n        <el-tab-pane label=\"专辑详情\" name=\"third\">\n          <div class=\"albumDesc\">{{ albumInfo.album.description }}</div>\n        </el-tab-pane>\n      </el-tabs>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { formatDate, handleNum, handleMusicTime } from \"plugins/utils\";\nimport Comment from \"components/comment/Comment.vue\";\n\nexport default {\n  name: \"Album\",\n  components: {\n    Comment,\n  },\n  data() {\n    return {\n      albumInfo: {},\n      comments: {},\n      // 当前评论页数\n      currentCommentPage: 1,\n      isSub: false,\n      // 评论是否在加载中\n      isCommentLoading: false,\n    };\n  },\n  watch: {\n    \"$store.state.musicId\"(current, last) {\n      this.handleDOM(current, last);\n    },\n  },\n  methods: {\n    // 请求\n    // 请求专辑详情\n    async getAlbumDetail() {\n      let res = await this.$request(\"album\", { id: this.$route.params.id });\n      res = res.data;\n      // 处理歌曲时间\n      res.songs.forEach((item, index) => {\n        res.songs[index].dt = handleMusicTime(item.dt);\n      });\n      console.log(res);\n      this.albumInfo = res;\n    },\n    // 获取歌单评论\n    async getAlbumComment(type) {\n      // 获取时间戳\n      var timestamp = Date.parse(new Date());\n      this.isCommentLoading = true;\n\n      // 每次请求前先清空comment\n      // this.comments.comments = [];\n\n      if (type == \"changePage\") {\n        let album = document.querySelector(\".album\");\n        let listInfo = document.querySelector(\".listInfo\");\n        console.log([listInfo]);\n        album.scrollTo({\n          behavior: \"smooth\",\n          top: listInfo.clientHeight - 25,\n        });\n      }\n\n      let res = await this.$request(\"/comment/album\", {\n        id: this.$route.params.id,\n        offset: (this.currentCommentPage - 1) * 50,\n        limit: 50,\n        timestamp,\n      });\n      this.isCommentLoading = false;\n      if (res.data.code !== 200) {\n        this.$message.error(\"获取评论失败,请稍后重试!\");\n        return;\n      }\n\n      // console.log(res);\n      this.comments = res.data;\n    },\n    // 获取已收藏专辑列表并判断用户是否收藏当前专辑  因为喜欢和收藏具有较高实时性，所以每次请求都添加时间戳，避免缓存304\n    async getAlbumSublist() {\n      let timestamp = Date.parse(new Date());\n      let res = await this.$request(\"/album/sublist\", {\n        limit: 1000,\n        timestamp,\n      });\n      console.log(res);\n      this.$store.commit(\"updateSubAlbumList\", res.data.data);\n    },\n\n    // 事件函数\n    handleIndex(index) {\n      // console.log(index);\n      index += 1;\n      if (index < 10) {\n        return \"0\" + index;\n      } else {\n        return index;\n      }\n    },\n\n    // 双击table的row的回调\n    async clickRow(row) {\n      // console.log(row);\n      // 将musicId提交到vuex中 供bottomControl查询歌曲url和其它操作\n      this.$store.commit(\"updateMusicId\", row.id);\n      // 如果歌单发生变化,则提交歌单到vuex\n      if (this.albumInfo.album.id != this.$store.state.musicListId) {\n        // 将歌单传到vuex\n        this.$store.commit(\"updateMusicList\", {\n          musicList: this.albumInfo.songs,\n          musicListId: this.albumInfo.album.id,\n        });\n      }\n    },\n    // 点击全部播放按钮的回调\n    playAll() {\n      this.$store.commit(\"updateMusicId\", this.albumInfo.songs[0].id);\n      this.$store.commit(\"updateMusicList\", {\n        musicList: this.albumInfo.songs,\n        musicListId: this.albumInfo.album.id,\n      });\n    },\n    // 评论点击翻页的回调\n    commentPageChange(page) {\n      this.currentCommentPage = page;\n      this.getAlbumComment(\"changePage\");\n    },\n    // 通过DOM操作样式\n    handleDOM(current, last) {\n      if (document.querySelector(\".album\")) {\n        let tableRows = document\n          .querySelector(\".album\")\n          .querySelectorAll(\".el-table__row\");\n        // 遍历当前musicList 找到当前播放的index的行进行渲染\n        // console.log(tableRows);\n        let index = this.albumInfo.songs.findIndex(\n          (item) => item.id == current\n        );\n        // console.log(index);\n        if (index != -1) {\n          // 直接修改dom样式的颜色无效  可能是因为第三方组件的原故\n          // 通过引入全局样式解决\n          // 将正在播放的音乐前面的索引换成小喇叭\n          tableRows[index].children[0].querySelector(\n            \".cell\"\n          ).innerHTML = `<div><i class=\"iconfont icon-yinliang\"></i></div>`;\n          tableRows[index].children[0]\n            .querySelector(\".iconfont\")\n            .classList.add(\"currentRow\");\n          tableRows[index].children[2]\n            .querySelector(\".cell\")\n            .classList.add(\"currentRow\");\n        }\n        // 清除上一首的样式\n        if (last != -1) {\n          let lastIndex = this.albumInfo.songs.findIndex(\n            (item) => item.id == last\n          );\n          if (lastIndex != -1) {\n            // 将上一个播放的dom的小喇叭换回索引\n            tableRows[lastIndex].children[0].querySelector(\n              \".cell\"\n            ).innerHTML = `<div>${\n              lastIndex + 1 < 10 ? \"0\" + (lastIndex + 1) : lastIndex + 1\n            }</div>`;\n\n            // 将上一首的类名删掉  小喇叭的html已经被替换了，不需要再还原\n            tableRows[lastIndex].children[2]\n              .querySelector(\".cell\")\n              .classList.remove(\"currentRow\");\n          }\n        }\n      }\n    },\n\n    // 点击收藏专辑的回调\n    async subAlbum() {\n      this.isSub = !this.isSub;\n      await this.$request(\"/album/sub\", {\n        id: this.$route.params.id,\n        t: this.isSub ? 1 : 0,\n      });\n      this.getAlbumSublist();\n    },\n\n    // 判断用户是否收藏了该专辑\n    getIsSub() {\n      this.isSub = this.$store.state.subAlbumList.find(\n        (item) => item.id == this.$route.params.id\n      );\n    },\n\n    // 点击单元格的回调\n    async clickCell(row, column, cell) {\n      // 判断点击的是下载按钮\n      if (cell.querySelector(\".icon-download\")) {\n        // 请求该歌曲的url\n        console.log(row);\n        let res = await this.$request(\"/song/url\", { id: row.id });\n        console.log(res);\n        if (res.data.data[0].url == null) {\n          this.$message.warning(\"暂时无法获取该资源哦!\");\n          return;\n        }\n\n        // 匹配资源的域名\n        let url = res.data.data[0].url.match(/\\http.*?\\.net/);\n        // 匹配域名名称，并匹配对应的代理\n        let serve = url[0].match(/http:\\/(\\S*).music/)[1];\n        if (\n          serve != \"/m7\" &&\n          serve != \"/m701\" &&\n          serve != \"/m8\" &&\n          serve != \"/m801\"\n        ) {\n          // 没有对应的代理\n          this.$message.error(\"匹配不到对应的代理,下载失败!\");\n          return;\n        }\n        // 截取后面的参数\n        let params = res.data.data[0].url.slice(url[0].length);\n        // console.log(url[0], serve, params);\n\n        let downloadMusicInfo = {\n          url: serve + params,\n          name:\n            row.name +\n            \" - \" +\n            row.ar[0].name +\n            \".\" +\n            res.data.data[0].type.toLowerCase(),\n        };\n        console.log(downloadMusicInfo);\n        this.$store.commit(\"updateDownloadMusicInfo\", downloadMusicInfo);\n      }\n    },\n  },\n  filters: {\n    showDate(value) {\n      // 1、先将时间戳转成Date对象\n      const date = new Date(value);\n\n      // 2、将date进行格式化\n      return formatDate(date, \"yyyy-MM-dd\");\n    },\n    handleNum,\n  },\n  created() {\n    this.getAlbumComment();\n  },\n  async mounted() {\n    await this.getAlbumDetail();\n    this.$nextTick(() => {\n      // 判断是否和上一次打开的歌单相同\n      if (this.$route.params.id == this.$store.state.musicListId) {\n        this.handleDOM(this.$store.state.musicId);\n      }\n    });\n    if (this.$store.state.subAlbumList == null) {\n      await this.getAlbumSublist();\n    }\n    this.getIsSub();\n  },\n};\n</script>\n\n<style scoped>\n.album {\n  height: calc(80vh - 105px);\n  overflow-y: scroll;\n}\n\n.listInfo {\n  display: flex;\n  padding: 25px 15px;\n  align-items: center;\n}\n\n.listAvatar {\n  width: 150px;\n  height: 150px;\n  overflow: hidden;\n  border-radius: 10px;\n  margin-right: 15px;\n}\n\n.listAvatar img {\n  width: 100%;\n}\n\n.right {\n  width: calc(100% - 200px);\n}\n\n.title {\n  display: flex;\n  align-items: center;\n}\n\n.titleTag {\n  font-size: 12px;\n  color: #ec4141;\n  border: 1px solid #ec4141;\n  padding: 1px 2px;\n  border-radius: 2px;\n  margin-right: 5px;\n  transform: scale(0.8);\n}\n\n.titleContent {\n  font-size: 20px;\n  font-weight: 600;\n  color: #373737;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 90%;\n}\n\n.createTime {\n  transform: scale(0.9);\n}\n\n.buttons {\n  margin: 8px 0 0 -5px;\n  display: flex;\n}\n\n.buttonItem {\n  font-size: 12px;\n  padding: 8px 15px;\n  border: 1px solid #ddd;\n  border-radius: 20px;\n  transform: scale(0.9);\n}\n\n.buttonItem i {\n  font-size: 12px;\n  margin-right: 3px;\n  transform: scale(0.9);\n}\n\n.playAll {\n  background-color: #ec4141;\n  color: white;\n}\n\n.otherInfo {\n  margin: 5px 0 0 -30px;\n  display: flex;\n  font-size: 12px;\n  transform: scale(0.9);\n}\n\n.musicNum {\n  margin-right: 13px;\n}\n\n.musicList {\n  margin: -15px 15px 0;\n}\n\n.page {\n  width: 100%;\n  text-align: center;\n  padding-bottom: 20px;\n}\n\n.albumDesc {\n  font-size: 12px;\n  color: #373737;\n  line-height: 25px;\n  letter-spacing: 0.5px;\n  text-indent: 2em;\n}\n\n.red {\n  color: #ec4141;\n}\n\n.album /deep/ .el-loading-spinner {\n  top: 40px;\n}\n\n.playCount span {\n  cursor: pointer;\n}\n</style>"]}]}