{"remainingRequest":"D:\\GH\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GH\\LWP\\light-weightplayer\\src\\views\\discover\\discoverChildren\\Singer.vue?vue&type=style&index=0&id=2f4e0012&scoped=true&lang=css&","dependencies":[{"path":"D:\\GH\\LWP\\light-weightplayer\\src\\views\\discover\\discoverChildren\\Singer.vue","mtime":1632135031000},{"path":"D:\\GH\\node_modules\\css-loader\\dist\\cjs.js","mtime":1636408356404},{"path":"D:\\GH\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1636408358142},{"path":"D:\\GH\\node_modules\\postcss-loader\\src\\index.js","mtime":1636408357193},{"path":"D:\\GH\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636408355875},{"path":"D:\\GH\\node_modules\\vue-loader\\lib\\index.js","mtime":1636408357599}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnNpbmdlckNvbnRhaW5lciB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKfQoKLnNpbmdlciB7CiAgbWF4LXdpZHRoOiAxMDAwcHg7CiAgcGFkZGluZzogMCAxMHB4Owp9Cgouc2VsZWN0b3JJdGVtIHsKICBkaXNwbGF5OiBmbGV4Owp9CgoudGl0bGUgewogIGZvbnQtc2l6ZTogMTJweDsKICB3aWR0aDogNDBweDsKICBsaW5lLWhlaWdodDogMzNweDsKfQoKLnNlY29uZE5hdkJhciB7CiAgd2lkdGg6IGNhbGMoMTAwJSAtIDYwcHgpOwp9CgoucGFnZSB7CiAgd2lkdGg6IDEwMCU7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIHBhZGRpbmctYm90dG9tOiAyMHB4Owp9CgoubGlzdENhcmRDb250YWluZXIgewogIHdpZHRoOiAxMDAlOwogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7Cn0K"},{"version":3,"sources":["Singer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8KA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Singer.vue","sourceRoot":"src/views/discover/discoverChildren","sourcesContent":["<template>\n  <div class=\"singerContainer\">\n    <div class=\"singer\">\n      <!-- 歌手分类选择 -->\n      <div class=\"selectors\">\n        <div class=\"selectorItem\">\n          <div class=\"title\">语种：</div>\n          <second-nav-bar\n            :SecondNavBarData=\"languageSort\"\n            @clickSecondBarItem=\"areaItem\"\n            class=\"secondNavBar\"\n          ></second-nav-bar>\n        </div>\n        <div class=\"selectorItem\">\n          <div class=\"title\">分类：</div>\n          <second-nav-bar\n            :SecondNavBarData=\"typeSort\"\n            @clickSecondBarItem=\"typeItem\"\n            class=\"secondNavBar\"\n          ></second-nav-bar>\n        </div>\n        <div class=\"selectorItem\">\n          <div class=\"title\">筛选：</div>\n          <second-nav-bar\n            :SecondNavBarData=\"initialSort\"\n            @clickSecondBarItem=\"initialItem\"\n            class=\"secondNavBar\"\n          ></second-nav-bar>\n        </div>\n      </div>\n      <div class=\"listCardContainer\">\n        <!-- 歌手列表 -->\n        <list-card\n          class=\"listCard\"\n          :listCardData=\"singerList\"\n          @clickListCardItem=\"clickListCardItem\"\n          isLoad\n          @bottomLoad=\"bottomLoad\"\n        ></list-card>\n      </div>\n    </div>\n    <go-top scrollObj=\".singerContainer\"></go-top>\n  </div>\n</template>\n\n<script>\nimport ListCard from \"components/listCard/ListCard.vue\";\nimport SecondNavBar from \"components/secondNavBar/SecondNavBar.vue\";\nimport GoTop from \"components/goTop/GoTop.vue\";\nexport default {\n  components: { SecondNavBar, ListCard, GoTop },\n  name: \"singer\",\n  data() {\n    return {\n      languageSort: [\n        { area: -1, name: \"全部\" },\n        { area: 7, name: \"华语\" },\n        { area: 96, name: \"欧美\" },\n        { area: 8, name: \"日本\" },\n        { area: 16, name: \"韩国\" },\n        { area: 0, name: \"其它\" },\n      ],\n      typeSort: [\n        { type: -1, name: \"全部\" },\n        { type: 1, name: \"男歌手\" },\n        { type: 2, name: \"女歌手\" },\n        { type: 3, name: \"乐队\" },\n      ],\n      initialSort: [\n        { initial: -1, name: \"热门\" },\n        { initial: \"a\", name: \"A\" },\n        { initial: \"b\", name: \"B\" },\n        { initial: \"c\", name: \"C\" },\n        { initial: \"d\", name: \"D\" },\n        { initial: \"e\", name: \"E\" },\n        { initial: \"f\", name: \"F\" },\n        { initial: \"g\", name: \"G\" },\n        { initial: \"h\", name: \"H\" },\n        { initial: \"i\", name: \"I\" },\n        { initial: \"j\", name: \"J\" },\n        { initial: \"k\", name: \"K\" },\n        { initial: \"l\", name: \"L\" },\n        { initial: \"m\", name: \"M\" },\n        { initial: \"n\", name: \"N\" },\n        { initial: \"o\", name: \"O\" },\n        { initial: \"p\", name: \"P\" },\n        { initial: \"q\", name: \"Q\" },\n        { initial: \"r\", name: \"R\" },\n        { initial: \"s\", name: \"S\" },\n        { initial: \"t\", name: \"T\" },\n        { initial: \"u\", name: \"U\" },\n        { initial: \"v\", name: \"V\" },\n        { initial: \"w\", name: \"W\" },\n        { initial: \"x\", name: \"X\" },\n        { initial: \"y\", name: \"Y\" },\n        { initial: \"z\", name: \"Z\" },\n        { initial: 0, name: \"#\" },\n      ],\n      area: -1,\n      type: -1,\n      initial: -1,\n      // 当前所在页数\n      currentPage: 1,\n      singerList: [],\n      // 是否还有更多数据\n      isMore: false,\n    };\n  },\n  methods: {\n    // 请求\n    // 请求歌手列表\n    async getSingerList() {\n      let res = await this.$request(\"/artist/list\", {\n        type: this.type,\n        area: this.area,\n        initial: this.initial,\n        offset: (this.currentPage - 1) * 30,\n      });\n      console.log(res);\n      this.singerList.push(...res.data.artists);\n      this.isMore = res.data.more;\n    },\n\n    // 事件处理\n    // 地区\n    areaItem(index) {\n      console.log(this.languageSort[index].area);\n      this.area = this.languageSort[index].area;\n      // 先清空list 再请求数据\n      this.singerList = [];\n      this.currentPage = 1;\n      this.getSingerList();\n    },\n    // 分类\n    typeItem(index) {\n      console.log(this.typeSort[index].type);\n      this.type = this.typeSort[index].type;\n      // 先清空list 再请求数据\n      this.currentPage = 1;\n      this.singerList = [];\n      this.getSingerList();\n    },\n    // 筛选\n    initialItem(index) {\n      console.log(this.initialSort[index].initial);\n      this.initial = this.initialSort[index].initial;\n      // 先清空list 再请求数据\n      this.currentPage = 1;\n      this.singerList = [];\n      this.getSingerList();\n    },\n    // 点击歌手item的回调\n    clickListCardItem(id) {\n      // console.log(id);\n      this.$router.push({ name: \"singerDetail\", params: { id } });\n    },\n    // 卡片上拉触底触发\n    bottomLoad() {\n      // console.log(\"bottomLoad\");\n      // 如果还有更多数据 则发送请求 将数据 push到数组\n      if (this.isMore == true) {\n        this.currentPage += 1;\n        this.getSingerList();\n      }\n    },\n  },\n  created() {\n    this.getSingerList();\n  },\n  mounted() {},\n};\n</script>\n\n<style scoped>\n.singerContainer {\n  display: flex;\n  justify-content: center;\n}\n\n.singer {\n  max-width: 1000px;\n  padding: 0 10px;\n}\n\n.selectorItem {\n  display: flex;\n}\n\n.title {\n  font-size: 12px;\n  width: 40px;\n  line-height: 33px;\n}\n\n.secondNavBar {\n  width: calc(100% - 60px);\n}\n\n.page {\n  width: 100%;\n  text-align: center;\n  padding-bottom: 20px;\n}\n\n.listCardContainer {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n}\n</style>"]}]}