{"remainingRequest":"D:\\light-weightPlayer\\light-weightplayer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\light-weightPlayer\\light-weightplayer\\src\\components\\lyricsScroll\\LyricsScroll.vue?vue&type=style&index=0&id=1f99040f&scoped=true&lang=css&","dependencies":[{"path":"D:\\light-weightPlayer\\light-weightplayer\\src\\components\\lyricsScroll\\LyricsScroll.vue","mtime":1632135031000},{"path":"D:\\light-weightPlayer\\light-weightplayer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1636408356404},{"path":"D:\\light-weightPlayer\\light-weightplayer\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1636408358142},{"path":"D:\\light-weightPlayer\\light-weightplayer\\node_modules\\postcss-loader\\src\\index.js","mtime":1636408357193},{"path":"D:\\light-weightPlayer\\light-weightplayer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636408355875},{"path":"D:\\light-weightPlayer\\light-weightplayer\\node_modules\\vue-loader\\lib\\index.js","mtime":1636408357599}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5seXJpY3MgewogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMjc1cHg7CiAgZm9udC1zaXplOiAxMnB4OwogIHRleHQtYWxpZ246IGNlbnRlcjsKICBvdmVyZmxvdy15OiBzY3JvbGw7CiAgLyogb3ZlcmZsb3c6IHNjcm9sbDsgKi8KfQoKLmx5cmljczo6LXdlYmtpdC1zY3JvbGxiYXIgewogIGRpc3BsYXk6IG5vbmU7Cn0KCi5seXJpY3NJdGVtIHsKICBmb250LXNpemU6IDEycHg7CiAgLyogaGVpZ2h0OiAyMHB4OyAqLwogIG1hcmdpbjogMjVweCAyMHB4OwogIHRyYW5zaXRpb246IGFsbCAwLjVzOwogIGxpbmUtaGVpZ2h0OiAyMHB4Owp9CgouY3VycmVudEx5cmljIHsKICBmb250LXdlaWdodDogNjAwOwogIGZvbnQtc2l6ZTogMTRweDsKICBjb2xvcjogYmxhY2s7Cn0KCi5wbGFjZWhvbGRlciB7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiA0MCU7Cn0K"},{"version":3,"sources":["LyricsScroll.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"LyricsScroll.vue","sourceRoot":"src/components/lyricsScroll","sourcesContent":["<template>\n  <div class=\"lyrics\">\n    <!-- 占位 -->\n    <div class=\"placeholder\"></div>\n    <!-- 因为歌词快了一句,所以减1 -->\n    <!-- 歌词item -->\n    <div\n      class=\"lyricsItem\"\n      :class=\"lyricsIndex - 1 == index ? 'currentLyric' : ''\"\n      v-for=\"(item, index) in lyric\"\n      :key=\"index\"\n    >\n      {{ item[1] }}\n    </div>\n    <!-- 占位 -->\n    <div class=\"placeholder\"></div>\n  </div>\n</template>\n\n<script>\nlet placeholderHeight = 0;\nexport default {\n  name: \"LyricsScroll\",\n  props: {\n    lyric: {\n      type: Array,\n      default: [],\n    },\n  },\n  data() {\n    return {\n      // 当前歌词索引\n      lyricsIndex: 0,\n    };\n  },\n  methods: {\n    // 实现歌词滚动\n    lyricScroll(currentLyric) {\n      // 获取歌词item\n      let lyricsArr = document.querySelectorAll(\".lyricsItem\");\n      // 获取歌词框\n      let lyrics = document.querySelector(\".lyrics\");\n      // placeholder的高度\n      if (placeholderHeight == 0) {\n        placeholderHeight = lyricsArr[0].offsetTop - lyrics.offsetTop;\n      }\n      //   歌词item在歌词框的高度 = 歌词框的offsetTop - 歌词item的offsetTop\n      //   console.log(currentLyric);\n      if (lyricsArr[currentLyric - 1]) {\n        let distance = lyricsArr[currentLyric - 1].offsetTop - lyrics.offsetTop;\n        //   lyricsArr[currentLyric].scrollIntoView();\n        lyrics.scrollTo({\n          behavior: \"smooth\",\n          top: distance - placeholderHeight,\n        });\n      }\n    },\n    //获取当前歌词索引\n    getCurrentLyricsIndex(currentTime) {\n      let lyricsIndex = 0;\n      this.lyric.some((item) => {\n        if (lyricsIndex < this.lyric.length - 1) {\n          if (currentTime > item[0]) {\n            lyricsIndex += 1;\n          }\n          return currentTime <= item[0];\n        }\n      });\n      // console.log(lyricsIndex);\n      this.lyricsIndex = lyricsIndex;\n    },\n  },\n  watch: {\n    // 监听当前播放时间\n    \"$store.state.currentTime\"(currentTime, lastTime) {\n      // 如果两个时间间隔有1秒,则可得知进度条被拖动 需要重新校准歌词index\n      // 当歌词数量大于1并且索引为零时,可能歌词位置差距较大,走这个if进行快速跳转\n      if (\n        (lastTime && Math.abs(currentTime - lastTime) >= 1) ||\n        (this.lyricsIndex == 0 && this.lyric.length > 1)\n      ) {\n        // 处理播放时间跳转时歌词位置的校准\n        if (this.lyric.length > 1) {\n          this.getCurrentLyricsIndex(currentTime);\n          // 滑动到当前歌词\n          this.lyricScroll(this.lyricsIndex);\n        }\n      }\n      // 根据实时播放时间实现歌词滚动\n      if (this.lyricsIndex < this.lyric.length) {\n        if (currentTime >= this.lyric[this.lyricsIndex][0]) {\n          this.lyricsIndex += 1;\n          this.lyricScroll(this.lyricsIndex);\n        }\n      }\n    },\n    // 监听vuex中的musicId 重置歌词索引\n    \"$store.state.musicId\"(musicId) {\n      this.lyricsIndex = 0;\n    },\n    lyric(current) {\n      console.log(\"获取了歌词\");\n      // 大于一秒，说明歌词在1秒后才请求成功 歌词可能不能马上跳转到当前时间 这里进行校准\n      if (this.$store.state.currentTime > 1) {\n        // 处理播放时间跳转时歌词位置的校准\n        if (this.lyric.length > 1) {\n          this.getCurrentLyricsIndex(this.$store.state.currentTime);\n          this.$nextTick(() => {\n            // 滑动到当前歌词\n            this.lyricScroll(this.lyricsIndex);\n          });\n        }\n      }\n    },\n  },\n  created() {},\n  mounted() {},\n};\n</script>\n\n<style scoped>\n.lyrics {\n  width: 100%;\n  height: 275px;\n  font-size: 12px;\n  text-align: center;\n  overflow-y: scroll;\n  /* overflow: scroll; */\n}\n\n.lyrics::-webkit-scrollbar {\n  display: none;\n}\n\n.lyricsItem {\n  font-size: 12px;\n  /* height: 20px; */\n  margin: 25px 20px;\n  transition: all 0.5s;\n  line-height: 20px;\n}\n\n.currentLyric {\n  font-weight: 600;\n  font-size: 14px;\n  color: black;\n}\n\n.placeholder {\n  width: 100%;\n  height: 40%;\n}\n</style>"]}]}