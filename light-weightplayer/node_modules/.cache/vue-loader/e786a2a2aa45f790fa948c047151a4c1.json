{"remainingRequest":"D:\\GH\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\GH\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\GH\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GH\\LWP\\light-weightplayer\\src\\components\\comment\\Comment.vue?vue&type=template&id=9b7ef5a2&scoped=true&","dependencies":[{"path":"D:\\GH\\LWP\\light-weightplayer\\src\\components\\comment\\Comment.vue","mtime":1632135031000},{"path":"D:\\GH\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636408355875},{"path":"D:\\GH\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1636408358221},{"path":"D:\\GH\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636408355875},{"path":"D:\\GH\\node_modules\\vue-loader\\lib\\index.js","mtime":1636408357599}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}